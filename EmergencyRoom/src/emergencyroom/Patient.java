package emergencyroom;

import java.io.Serializable;
import java.util.Map;
import java.util.HashMap;
import java.util.List;
import java.util.ArrayList;
import java.text.SimpleDateFormat;
import java.util.Date;

/**
 * A representation of a Patient.
 * 
 * @author chowder5, ngokare1, caozhi1, alavined
 * 
 */
public class Patient implements Serializable{
	
	//Auto-generated by Eclipse
	private static final long serialVersionUID = 4815120194821127276L;
	
	// maps date to vital signs of this Patient
	private Map<String, VitalSign> vitalSigns;
	// name of this Patient
	private String name;
	// health card number of this Patient
	private String healthNum;
	// date of birth of this Patient
	private String dob;
	// list of arrival times of this Patient
	private List<String> arrivals;
	// list of prescriptions of this Patient
	private Map<String, String> prescriptions;
	// list of times seen by the doctor for this Patient
	private List<String> doctorTimes;
	// this Patient's urgency
	private int urgency;
	// this Patient's latest recorded temperature
	private double temperature;
	// this Patient's latest recorded systolic blood pressure reading
	private int systolic;
	// this Patient's latest recorded diastolic blood pressure reading
	private int diastolic;
	// this Patient's latest recorded heart rate
	private int heartRate;
	// this Patient's latest VitalSign time
	private String latestVitalTime;
	
	/**
	 * Creates a new Patient with the given name, health card number,
	 * and date of birth.
	 * @param name the name of the new Patient
	 * @param healthNum the health card number of the new Patient
	 * @param dob the date of birth of the new Patient, in DDMMYYYY format
	 */
	public Patient(String name, String healthNum, String dob){
		this.name = name;
		this.healthNum = healthNum;
		this.dob = dob;
		this.vitalSigns = new HashMap<String, VitalSign>();
		this.arrivals = new ArrayList<String>();
		this.prescriptions = new HashMap<String, String>();
		this.doctorTimes = new ArrayList<String>();
		this.urgency = 0;
		
		this.latestVitalTime = "00/00/0000/00:00:00";
		this.temperature = 0;
		this.systolic = 0;
		this.diastolic = 0;
		this.heartRate = 0;
	}

	/**
	 * Returns the urgency of this Patient
	 * @return urgency urgency of this Patient
	 */
	public int getUrgency() {
		return urgency;
	}

	/**
	 * Sets the urgency of this Patient
	 * @param urgency urgency of this Patient
	 */
	public void setUrgency(int urgency) {
		this.urgency = urgency;
	}
	
	/**
	 * Returns all recorded prescriptions of this Patient
	 * @return prescriptions all recorded prescriptions of this Patient
	 */
	public Map<String, String> getPrescriptions() {
		return prescriptions;
	}

	/**
	 * Adds a recorded prescription of this Patient.
	 * @param prescription the recorded prescription of this Patient
	 */
	public void addPrescription(String prescription){
		prescriptions.put(getCurrentDateTime(), prescription);
	}
	
	/**
	 * Adds a previously added prescription obtained from the file.
	 * @param date the date of the recorded prescription
	 * @param prescription the recorded prescription of this Patient
	 */
	public void addPrescriptionFromFile(String date, String prescription){
		prescriptions.put(date, prescription);
	}
	
	/**
	 * Returns the name of this Patient.
	 * @return name name of this Patient
	 */
	public String getName() {
		return name;
	}

	/**
	 * Sets the name of this Patient to name.
	 * @param name the new name of this Patient
	 */
	public void setName(String name) {
		this.name = name;
	}
	
	/**
	 * Returns the health card number of this Patient.
	 * @return healthNum the health card number of this Patient
	 */
	public String getHealthNum() {
		return healthNum;
	}

	/**
	 * Sets the health card number of this Patient to healthNum.
	 * @param healthNum the new health card number of this Patient
	 */
	public void setHealthNum(String healthNum) {
		this.healthNum = healthNum;
	}

	/**
	 * Returns the date of birth of this Patient.
	 * @return dob the date of birth of this Patient
	 */
	public String getDob() {
		return dob;
	}

	/**
	 * Sets the date of birth of this Patient to dob.
	 * @param dob the new date of birth of this Patient
	 */
	public void setDob(String dob) {
		this.dob = dob;
	}

	/**
	 * Returns all recorded vital signs of this Patient.
	 * @return vitalSigns the recorded vital signs of this Patient
	 */
	public Map<String, VitalSign> getVitalSigns() {
		return vitalSigns;
	}

	/**
	 * Adds a recorded vital sign of this Patient.
	 * @param vitalSign the recorded vital sign of this Patient
	 */
	public void addVitalSign(VitalSign vitalSign){
		vitalSigns.put(getCurrentDateTime(), vitalSign);
		
		temperature = vitalSign.getTemperature();
		systolic = vitalSign.getSystolic();
		diastolic = vitalSign.getDiastolic();
		heartRate = vitalSign.getHeartRate();
	}
	
	/**
	 * Returns the latest temperature recorded of this Patient
	 * @return temperature latest temperature recorded of this Patient
	 */
	public double getTemperature() {
		return temperature;
	}

	/**
	 * Returns the systolic blood pressure reading of this Patient
	 * @return systolic systolic blood pressure reading of this Patient
	 */
	public int getSystolic() {
		return systolic;
	}

	/**
	 * Returns the latest diastolic blood pressure reading of this Patient
	 * @return diastolic latest diastolic blood pressure reading of this
	 *  Patient
	 */
	public int getDiastolic() {
		return diastolic;
	}

	/**
	 * Returns the latest heart rate of this Patient
	 * @return heartRate latest heart rate of this Patient
	 */
	public int getHeartRate() {
		return heartRate;
	}

	/**
	 * Adds a previously added VitalSign obtained from the file.
	 * @param date the date of the recorded vital sign
	 * @param vitalSign the recorded vital sign of this patient
	 */
	public void addVitalSignFromFile(String date, VitalSign vitalSign) {
		vitalSigns.put(date, vitalSign);
		
		if ((date.compareTo(latestVitalTime) > 0 || 
				(date.substring(6,9).compareTo(latestVitalTime.substring(6,10)) > 0))) {
				temperature = vitalSign.getTemperature();
				systolic = vitalSign.getSystolic();
				diastolic = vitalSign.getDiastolic();
				heartRate = vitalSign.getHeartRate();
				latestVitalTime = date;
		}
			
	}
	
	/**
	 * Sets all recorded vital signs of this Patient to vitalSigns.
	 * @param vitalSigns the recorded vital signs of this Patient
	 */
	public void setVitalSigns(Map<String, VitalSign> vitalSigns) {
		this.vitalSigns = vitalSigns;
	}

	/**
	 * Returns all arrival times of this Patient.
	 * @return arrivals all arrival times of this Patient
	 */
	public List<String> getArrivals() {
		return arrivals;
	}
	
	/**
	 * Sets all arrival times of this Patient to arrivals.
	 * @param arrivals all of the arrival times of this Patient
	 */
	public void setArrivals(List<String> arrivals) {
		this.arrivals = arrivals;
	}
	
	/**
	 * Adds the arrival time of this Patient, which will be the time
	 * when the nurse records this Patient's information.
	 **/
	public void addArrival(){
		arrivals.add(getCurrentDateTime());
	}
	
	/**
	 * Adds a previously added arrival time, obtained from the file.
	 **/
	public void addArrivalFromFile(String date) {
		arrivals.add(date);
	}
	
	/**
	 * Returns all times seen by a doctor of this Patient.
	 * @return doctorTimes all times seen by a doctor of this Patient
	 */
	public List<String> getDoctorTimes() {
		return doctorTimes;
	}

	/**
	 * Adds a time when this Patient has seen a doctor
	 * @param doctorTimes the times the Patient has seen a doctor
	 */
	public void addDoctorTimes(List<String> doctorTimes) {
		doctorTimes.add(getCurrentDateTime());
	}

	/**
	 * Returns a boolean if the Patient has seen the doctor
	 * @return boolean the boolean that if this Patient has seen the doctor
	 */
	public boolean isSeenByDoctor() {
		
		String lastArrivalDate = "";
		String lastDoctorDate = "";
		
		if (arrivals.size() > 0) {
			lastArrivalDate = arrivals.get(arrivals.size() - 1).substring(0,10);
		}
		
		if (doctorTimes.size() > 0) {
			lastDoctorDate = doctorTimes.get(doctorTimes.size() - 1).substring(0,10);
		}
		
		String currentDate = getCurrentDateTime().substring(0,10);
		if (!(lastArrivalDate == "") && (lastArrivalDate.equals(currentDate))) {
			if ((lastDoctorDate == "") || (!(lastDoctorDate.equals(currentDate)))) {
				return false;
			}
		}
		
		return true;
			
	}


	
	/**
	 * Returns a String representation of this Patient.
	 **/
	@Override
	public String toString() {
		String result = name + "," + healthNum + "," + dob;
		return result;
	}
	
	/**
	 * Returns the current date and current time.
	 * @return patientDateTime the date and time the patient was recorded
	 */
	private String getCurrentDateTime() {
		String patientDateTime = "";
		Date date = new Date();
		SimpleDateFormat dateFormat = new 
				SimpleDateFormat("MM/dd/yyyy/HH:mm:ss");
		patientDateTime = dateFormat.format(date);
		
		return patientDateTime;
	}
	
}
