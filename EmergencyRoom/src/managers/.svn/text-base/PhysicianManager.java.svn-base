package managers;

import java.io.Serializable;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;
import java.util.Scanner;

/**
 * A class that manages a map of Strings to Strings. PhysicianManager 
 * knows how to read String objects from a file and how to write its 
 * collection of String to a file.
 * 
 * @author chowder5, caozhi1, alavined
 */

public class PhysicianManager implements Serializable {

	//Auto-generated by Eclipse
	private static final long serialVersionUID = 3338147512557076572L;
	
	//Physicians' passwords by their user name
	private Map<String, String> physicians;
	
	/**
     * Constructs a new PhysicianManager that manages a collection of user names
     * and passwords stored in directory dir in file named by fileName.
     * @param dir the directory in which the data file is stored
     * @param fileName the data file containing Person information
     * @throws IOException
     */
	public PhysicianManager(File dir, String fileName) throws IOException{
		this.physicians = new HashMap<String, String>();
        
        // Populates the list using stored data, if it exists.
        File file = new File(dir, fileName);
        if (file.exists()) {
            this.populate(file.getPath());
        } else {
            file.createNewFile();
        }
    }
	
	/**
     * Adds a map of a physician's user name to their password to this 
     * PhysicianManager
     * @param userName the username of the physician's account
     * @param password the password of the physician's account
     */
	public void add(String userName, String password) {
        physicians.put(userName, password);
    }

    /**
     * Returns the physicians managed by this PhysicianManager.
     * @return physicians a map of all physicians' user name and their password
     */
    public Map<String, String> getPhysicians() {
        return physicians;
    }
    
    /**
     * A string representation of all physicians in this physicianManager.
     */
    @Override
    public String toString() {
        return "PhysicianManager [Physicians=" + physicians + "]";
    }
    
    /**
     * Populates the map of Strings from the file at path filePath
     * @param filePath the file path of the data file
     * @throws FileNotFoundException
     */
    private void populate(String filePath) throws FileNotFoundException {
        
        Scanner scanner = new Scanner(new FileInputStream(filePath));
        String [] record;
        
        while(scanner.hasNextLine()) {
        	record = scanner.nextLine().split(",");
        	String userName = record[0];
        	String password = record[1];
            physicians.put(userName, password);
        }
        scanner.close();
    }
    
    /**
     * Returns a boolean if the given user name and password is within
     * the map of all physicians.
     * @return the boolean for which if the given user name is a key
     * and the password is the value of the key in the map.
     */
    public boolean isPhysician(String userName, String password) {
    	if (physicians.containsKey(userName)) {
    		return (physicians.get(userName) == password);
    	}else{
    		return false;
    	}
    }
}
