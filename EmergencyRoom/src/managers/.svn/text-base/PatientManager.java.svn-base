package managers;

import java.io.Serializable;

import java.io.File;

import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import java.util.List;
import java.util.ArrayList;
import java.util.Scanner;

import emergencyroom.Patient;
import emergencyroom.VitalSign;

/**
 * A class that manages Patients. PatientManager knows how to read Patient
 * objects from a file and how to write its collection of Patients to a file.
 * 
 * @author chowder5, ngokare1, caozhi1, alavined
 * 
 */
public class PatientManager implements Serializable{

	//Auto-generated by Eclipse
	private static final long serialVersionUID = -7124207988681267005L;
	
	// Patients by their health card number
	private Map<String, Patient> patients;
	
	/**
     * Constructs a new PatientManager that manages a collection of Patients
     * stored in directory dir in file named fileName.
     * @param dir the directory in which the data file is stored
     * @param fileName the data file containing Person information
     * @throws IOException
     */
	public PatientManager(File dir, String fileName) throws IOException{
		this.patients = new HashMap<String, Patient>();
        
        // Populates the patient list using stored data, if it exists.
		File file = new File(dir, fileName);
        if (file.exists()) {
            this.populate(file.getPath());
        } else {
            file.createNewFile();
        }
    }
	/**
     * Adds patient to this PatientManager.
     * @param patient a Patient to be added.
     */
	public void addPatient(Patient patient) {
        patients.put(patient.getHealthNum(), patient);
    }

    /**
     * Returns the Patients managed by this PatientManager.
     * @return patients a map of health card number to Patient object
     */
    public Map<String, Patient> getPatients() {
        return patients;
    }
    
    /**
     * Returns the patient information given their health card number
     * @return patient a Patient's information given their health card number
     */
    public Patient getPatient(String healthNum) {
    	return patients.get(healthNum);
    }
    
    @Override
    public String toString() {
        return "PatientManager [patients=" + patients + "]";
    }
    
    /**
     * Returns a list of patients that have arrived 
     * in order of urgency (from most urgent to least urgent).  
     * How urgent is determined by the hospital's policy.
     * @return patientUrgencyList the list of patients in order of urgency
     */
    public List<Patient> getUrgencyList() {
    	List<Patient> patientUrgencyList = new ArrayList<Patient>();
    	int urgencyPoint = 0;
    	
    	for (Patient p : patients.values()) {
    		if (!(p.isSeenByDoctor())) {
    			int dobYear = Integer.parseInt(p.getDob().substring(6,9) + 
    					p.getDob().charAt(p.getDob().length() - 1));
    			int currentYear = Integer.parseInt(getCurrentDate().substring(6,10));
    			int age = currentYear - dobYear;
    			
    			if (age < 2) {
    				urgencyPoint += 1;
    			}
    			
    			if (p.getTemperature() >= 39.0) {
    				urgencyPoint += 1;
    			}
    			
    			if ((p.getSystolic() >= 140) || (p.getDiastolic() >= 90)) {
    				urgencyPoint += 1;
    			}
    			
    			if ((p.getHeartRate() >= 100 ) || (p.getHeartRate() <= 50)) {
    				urgencyPoint += 1;
    			}
    			
    			p.setUrgency(urgencyPoint);
    			urgencyPoint = 0;
    		}
    		
    	}
    	
    	for (int i = 4; i >= 0; i--) {
	    	for (Patient p : patients.values()) {
	    		if (!(p.isSeenByDoctor())) {
	    			if (p.getUrgency() == i){
	    				patientUrgencyList.add(p);
	    			}
	    		}
	    	}
    	}
    		
    	return patientUrgencyList;
    }
    
    /**
     * Saves the Patient objects to file outputStream.
     * @param outputStream the output stream to write the Patient data to file
     * outputStream
     */
    public void saveToFile(FileOutputStream outputStream) {
        try {
        	// write patient info on one line, their vital signs on the next
        	// line and their arrival times on the line after vital signs
        	for (Patient p : patients.values()) {
        		
        		//Write the patient's information onto the text file.
        		outputStream.write((p.toString()).getBytes());
        		Map<String, VitalSign> vitalSigns = p.getVitalSigns();
        		
        		//Write to the next line
        		outputStream.write(
        				System.getProperty("line.separator").getBytes());
        		
        		//Write the patient's vital signs onto the text file
        		for (String date : vitalSigns.keySet()) {
        			outputStream.write((date + "," + 
        					vitalSigns.get(date).toString() + "&").getBytes());
        		}
        		
        		//Write to the next line
        		outputStream.write(
        				System.getProperty("line.separator").getBytes());
        		
        		//Write the arrival times of the Patient onto the text file.
        		List<String> arrivals = p.getArrivals();
        		for (int i = 0; i < arrivals.size(); i++) {
        			outputStream.write((arrivals.get(i) + ",").getBytes());
        		}
        		
        		//Write to the next line
        		outputStream.write(
        				System.getProperty("line.separator").getBytes());
        		
        		//Write the prescriptions of the Patient onto the text file.
        		Map<String, String> prescriptions = p.getPrescriptions();
        		if (prescriptions.isEmpty()) {
        			outputStream.write("no prescriptions".getBytes());
        		}else{
        			for (String date : prescriptions.keySet()) {
        			outputStream.write((date + "##" + 
        					prescriptions.get(date) + "::").getBytes());
        			}
        		}
        		
        		outputStream.write(
        				System.getProperty("line.separator").getBytes());
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
    
    /**
     * Populates the map of Patients from the file at path filePath
     * @param filePath the file path of the data file
     * @throws FileNotFoundException
     */
    private void populate(String filePath) throws FileNotFoundException {
        
        Scanner scanner = new Scanner(new FileInputStream(filePath));
        
        while(scanner.hasNextLine()) {
            
        	String [] record;
            String [] vitalSigns;
            String [] arrivals;
            String [] prescriptions;
            
            String strRecord = scanner.nextLine();
            if (!(strRecord == "")) {
	        	record = strRecord.split(",");
	        	String name = record[0];
	        	String healthNum = record[1];
	        	String dob = record[2];
	        	Patient patient = new Patient(name, healthNum, dob);
	        	
	        	String str = scanner.nextLine();
	        	vitalSigns = str.split("&");
	        	for (int i = 0; i < vitalSigns.length; i++) {
	        		String [] dateVitalSign = vitalSigns[i].split(",");
	        		String [] vitalSignInfo = dateVitalSign[1].split("~");
	        		
	        		double temp = Double.parseDouble(vitalSignInfo[0]);
	        		int systolic = Integer.parseInt(vitalSignInfo[1]);
	        		int diastolic = Integer.parseInt(vitalSignInfo[2]);
	        		int heartRate = Integer.parseInt(vitalSignInfo[3]);
	        		
	        		VitalSign vitalSign = new VitalSign(
	        				temp, systolic, diastolic, heartRate);
	        		patient.addVitalSignFromFile(dateVitalSign[0], vitalSign);
	        	}
	        	
	        	String strArrivals = scanner.nextLine();
	        	arrivals = strArrivals.split(",");
	        	for (int i = 0; i < arrivals.length; i++){
	        		patient.addArrivalFromFile(arrivals[i]);
	        	}
	        	
	        	String strPrescriptions = scanner.nextLine();
	        	prescriptions = strPrescriptions.split("::");
	        	if (!strPrescriptions.equals("no prescriptions")) {
	        		for (int i = 0; i < prescriptions.length; i++) {
	        			String [] prescription = prescriptions[i].split("##");
	        			patient.addPrescriptionFromFile(prescription[0], 
	        					prescription[1]);
	        		}
	        	}
	        	patients.put(healthNum, patient);
            }
        }
        scanner.close();
    }
    
    /**
	 * Returns the current date
	 * @return patientDate the date the patient was recorded
	 */
	private String getCurrentDate() {
		String patientDate = "";
		Date date = new Date();
		SimpleDateFormat dateFormat = new 
				SimpleDateFormat("MM/dd/yyyy");
		patientDate = dateFormat.format(date);
		
		return patientDate;
	}
}

